package meercode.parser;

import java.util.ArrayList;
import java.util.List;
// import java.lang.Exception;
import meercode.ast.*;
import meercode.utils.*;

public final class Parser {

    private List<List<String>> mTokens;
    private static List<String> mKeywords = ReservedWords.getReservedWords();
    private static List<String> mOperators = ReservedWords.getOperators();
    private static List<String> mComparators = ReservedWords.getComparators();

    /**
     * Our main testing method
     */
    public static void main(String[] args) {
        List<List<String>> tokens = new ArrayList<List<String>>();
        tokens.add(new ArrayList<String>());
        tokens.get(0).add("test 0 0");
        tokens.get(0).add("test 0 1");
        tokens.add(new ArrayList<String>());
        tokens.get(1).add("test 1 0");

        AbstractSyntaxTree ast = Parser.parseTokens(tokens);
    }

    private Parser() {
        // throw new Exception("Error");
    }

    /**
     * Our main Token interpreter
     * Creates a head (NOP) and puts function on left, next line/node/NOP on right
     * @param pTokens The total list of tokens to translate into AST
     * @return The final AST based on all of the tokens given in the parameter
     */
    public static AbstractSyntaxTree parseTokens(List<List<String>> pTokens) {
        AbstractSyntaxTree tree = new AbstractSyntaxTree(new Node("NOP"));

        for (List<String> rows : pTokens) {
            for (String token : rows) {
                if (mKeywords.contains(token))
                {
                    tree.getHead().mLeft = new Node(token);
                }
            }
        }
        return tree;
    }

    public static AbstractSyntaxTree parseTokensRecursive(List<List<String>> pTokens) {

    }
    private static AbstractSyntaxTree parseTokensRecursive(List<List<String>> pTokens) {
        
    }

    // We have 3 main ast types: operators, conditionals, and functions
    /**
     * 
     * @param pTokens The tokens to process / the operation's expression
     * @return The head of the operation AST generated by the method
     */
    private static Node operatorAST(List<String> pTokens)
    {
        Node currentNode = new Node();

        return null;
    }
    /**
     * 
     * @param pTokens The tokens to process / the operation's expression
     * @return The head of the conditional AST generated by the method
     */
    private static Node conditionalAST(List<String> pTokens)
    {
        Node currentNode = new Node();
        
        return null;
    }
    /**
     * 
     * @param pTokens The tokens to process / the operation's expression
     * @return The head of the function AST generated by the method
     */
    private static Node functionAST(List<String> pTokens)
    {
        Node currentNode = new Node();

        return null;
    }
    /**
     * 
     * @param pTokens The tokens to process / the operation's expression
     * @return The head of the operation AST generated by the method
     */
    private static Node parenthesisGrouping(List<String> pTokens) {


        return null;
    }
}