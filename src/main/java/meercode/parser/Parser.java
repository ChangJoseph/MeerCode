package meercode.parser;

import java.util.ArrayList;
import java.util.List;
// import java.lang.Exception;
import meercode.ast.*;
import meercode.utils.*;

public final class Parser {

    private List<List<String>> kTokens;
    private final static List<String> kKeywords = ReservedWords.getReservedWords();
    private final static List<String> kOperators = ReservedWords.getOperators();
    private final static List<String> kComparators = ReservedWords.getComparators();

    /**
     * Our main testing method
     */
    public static void main(String[] args) {
        List<List<String>> tokens = new ArrayList<List<String>>();
        tokens.add(new ArrayList<String>());
        tokens.get(0).add("test 0 0");
        tokens.get(0).add("test 0 1");
        tokens.add(new ArrayList<String>());
        tokens.get(1).add("test 1 0");

        AbstractSyntaxTree ast = Parser.parseTokens(tokens);
    }

    private Parser() {
        // throw new Exception("Error");
    }

    /**
     * Our main Token interpreter
     * Creates a head (NOP) and puts function on left, next line/node/NOP on right
     * @param pTokens The total list of tokens to translate into AST
     * @return The final AST based on all of the tokens given in the parameter
     */
    public static AbstractSyntaxTree parseTokens(List<List<String>> pTokens) {
        AbstractSyntaxTree tree = new AbstractSyntaxTree(new Node("NOP"));

        // for (List<String> rows : pTokens) {
        //     for (String token : rows) {
        //         if (kKeywords.contains(token))
        //         {
        //             tree.getHead().mLeft = new Node(token);
        //         }
        //     }
        // }

        for (int count = 0; count < pTokens.size(); count++) {
            List<String> row = pTokens.get(count);
            ParserMeta meta = processMeta(row);
            boolean list2d = meta.getListBool();
            char astType = meta.getASTType();
            switch(astType) {
                case 'c':
                    tree.getHead().mLeft = conditionalAST(row); // TODO see how we store the methods into our 'tree' AST
                    break;
                case 'l': 
                    int c = count;
                    try {
                        while(!pTokens.get(c).contains("end"))
                        {
                            c++;
                        }
                    }
                    catch (IndexOutOfBoundsException ie) 
                    {
                        System.out.println("You gotta write end after your blocks bucko");
                    }
                    tree.getHead().mLeft = multiLineConditionalAST(pTokens.subList(count, c));
                    count = c;
                case 'k': System.out.println("Yur doin sumthin wrong boi");
                case 'f': tree.getHead().mLeft = functionAST(row);
                case 'o': tree.getHead().mLeft = operatorAST(row);
            }
        }
        return tree;
    }

    /**
     * Processes a line of code and gives back info on it
     * @param pTokens The line of code in form of list of tokens
     * @return ParserMeta class that contains the info
     */
    private static ParserMeta processMeta(List<String> pTokens) {
        ParserMeta meta;
        String function = pTokens.get(0);
        String upperCaseFunction = function.toUpperCase();

        if (upperCaseFunction.equals("IF")) { // TODO What if the END is on the same line? (it would have to be ParserMeta(false, 'c') )
            meta = new ParserMeta(true, 'c');
        }
        else if (upperCaseFunction.equals("REPEATWHILE")) {
            meta = new ParserMeta(true, 'l');
        }
        else if (arrayContainsFromReference(pTokens, kOperators)) // TODO find a faster way to check if pTokens has one or more element from kOperators
        {
            meta = new ParserMeta(false, 'o');
        }
        else if (function.matches("[A-Z]")) {
            meta = new ParserMeta(false, 'a'); // TODO figure out ambiguity
        }
        else {
            throw new IllegalArgumentException("SYNTAX ERROR");
        }
        
        return meta;
    }

    // We have 3 main ast types: operators, conditionals, and functions
    /**
     * 
     * @param pTokens The tokens to process
     * @return The head of the operation AST generated by the method
     */
    private static Node operatorAST(List<String> pTokens)
    {
        Node headNode = new Node();
        Node currentNode = new Node();

        return headNode;
    }
    /**
     * 
     * @param pTokens The tokens to process
     * @return The head of the conditional AST generated by the method
     */
    private static Node conditionalAST(List<String> pTokens) // TODO I only made a variable to track which tokens to use in each scenario; make them do something
    {
        Node headNode = new Node(pTokens.get(0));
        Node currentNode = headNode;

        int indexOfThen = pTokens.indexOf("then");
        int indexOfWhatIf = pTokens.indexOf("whatif");
        int indexOfOtherwise = pTokens.indexOf("otherwise");
        int indexOfEnd = pTokens.indexOf("end");

        // The conditional expression
        List<String> conditionalTokens = pTokens.subList(1, indexOfThen);

        // Case when an else if statement exists
        if (indexOfWhatIf >= 0) {

            // The true statements
            List<String> trueTokens = pTokens.subList(indexOfThen, indexOfWhatIf);

            if (indexOfOtherwise >= 0) { // TODO
                // List<String> blah;
            }
        }
        else if (indexOfOtherwise >= 0) {

            // The true statements
            List<String> trueTokens = pTokens.subList(indexOfThen, indexOfOtherwise);

            // The false statements
            List<String> falseTokens = pTokens.subList(indexOfOtherwise, indexOfEnd);
        }
        else {

            // The true statements
            List<String> trueTokens = pTokens.subList(indexOfThen, indexOfEnd);
        }
        
        return headNode;
    }
    /**
     * 
     * @param pTokens The tokens to process
     * @return The head of the conditional AST generated by the method
     */
    private static Node multiLineConditionalAST(List<List<String>> pTokens)
    {
        
    }
    private static Node loopAST(List<String> pTokens)
    {
        Node headNode = new Node();
        Node currentNode = new Node();

        return headNode;
    }
    /**
     * 
     * @param pTokens The tokens to process
     * @return The head of the function AST generated by the method
     */
    private static Node functionAST(List<String> pTokens)
    {
        Node headNode = new Node();
        Node currentNode = new Node();

        return headNode;
    }
    // /**
    //  * 
    //  * @param pTokens The tokens to process 
    //  * @return The head of the operation AST generated by the method
    //  */
    // private static Node parenthesisGrouping(List<String> pTokens) {


    //     return null;
    // }

    /**
     * @param pCheck The line of code (tokens) to check
     * @param pReference The list of elements to reference
     * @return If the pCheck contains any of pReference's elements
     */
    private static boolean arrayContainsFromReference(List<String> pCheck, List<String> pReference) {
        for (String elem : pCheck) {
            if (pReference.contains(elem)) return true;
        }
        return false;
    }
}
